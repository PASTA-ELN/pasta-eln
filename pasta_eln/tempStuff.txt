"""
    self.resCouchdb  = couchdb('test')
    self.resConfiguration = configuration('test')
    self.resOntology =  ontology('test')
    text = "## Results of Analysis"
    if self.resGitAnnex=='':
      text += "\n### Git-Annex is installed."
    else
      text += "\n### Git-Annex is NOT installed and will be installed in the next step."
    if self.resCouchdb=='':
      text += "\n### Couch-DB is installed."
    else
      text += "\n### Couch-DB is NOT installed and will be installed in future steps."
    if self.resConfiguration=='':
      text += "\n### PASTA-ELN's configuration file is acceptable."
    else
      text += "\n### PASTA-ELN's configuration file has to be corrected in one of the next steps."
    if '**ERROR' not in self.resOntology:
      text += "\n### The ontology in the database is acceptable."
    else
      text += "\n### The ontology in the database has to be written in one of the next steps."
    self.text2.setMarkdown(text)
    self.screen1W.setHidden(True)
    self.screen2W.setHidden(False)
    if self.resGitAnnex=='' and self.resCouchdb=='' and self.resConfiguration=='' and '**ERROR' not in self.resOntology:
      self.button2.setText('Finish')
      self.button2.clicked.connect()
    return

  def screen2(self):
    print('clicked 2')
    return



  def gitAnnex(self, command):
    """
    Function to test and install git-annex

    Args:
      command (str): options=test, install
    """
    if command == 'test':
      if gitAnnex('test') == '':
        icon = qta.icon('fa.check', scale_factor=1.2)
        button = QPushButton(icon, "")
        self.tabLayoutBody.addWidget(button, 2, 1)
      else:
        button = QPushButton('Install')
        button.clicked.connect(lambda: gitAnnex('install'))
        self.tabLayoutBody.addWidget(button, 2, 1)
        button = QPushButton('Help')
        button.clicked.connect(lambda: self.help('gitAnnex'))
        self.tabLayoutBody.addWidget(button, 2, 3)
    else:
      gitAnnex('install')
      icon = qta.icon('fa.question', scale_factor=1.2)
      button = QPushButton(icon, "")  #icon with no text
      button.clicked.connect(lambda: self.gitAnnex('test'))
      self.tabLayoutBody.addWidget(button, 2, 1)
    return


  def couchdb(self, command):
    """
    Function to test and install couch-DB

    Args:
      command (str): options=test, install
    """
    if command == 'test':
      if couchdb('test') == '':
        icon = qta.icon('fa.check', scale_factor=1.2)
        button = QPushButton(icon, "")
        self.tabLayoutBody.addWidget(button, 3, 1)
      else:
        button = QPushButton('Install')
        button.clicked.connect(lambda: couchdb('install'))
        self.tabLayoutBody.addWidget(button, 3, 1)
        button = QPushButton('Help')
        button.clicked.connect(lambda: self.help('couchdb'))
        self.tabLayoutBody.addWidget(button, 3, 3)
    else:
      couchdb('install')
      icon = qta.icon('fa.question', scale_factor=1.2)
      button = QPushButton(icon, "")  #icon with no text
      button.clicked.connect(lambda: self.couchdb('test'))
      self.tabLayoutBody.addWidget(button, 3, 1)
    return


  def configuration(self, command):
    """
    Function to test and repair the .pastaELN.json file in the home directory

    Args:
      command (str): options=test, repair
    """
    if command == 'test':
      if configuration('test') == '':
        icon = qta.icon('fa.check', scale_factor=1.2)
        button = QPushButton(icon, "")
        self.tabLayoutBody.addWidget(button, 4, 1)
      else:
        button = QPushButton('Install')
        button.clicked.connect(lambda: configuration('install'))
        self.tabLayoutBody.addWidget(button, 4, 1)
        button = QPushButton('Help')
        button.clicked.connect(lambda: self.help('configuration'))
        self.tabLayoutBody.addWidget(button, 4, 3)
    else:
      configuration('install')
      icon = qta.icon('fa.question', scale_factor=1.2)
      button = QPushButton(icon, "")  #icon with no text
      button.clicked.connect(lambda: self.configuration('test'))
      self.tabLayoutBody.addWidget(button, 4, 1)
    return


  def ontology(self, command):
    """
    Function to test and create ontology

    Args:
      command (str): options=test, install
    """
    if command == 'test':
      answer = ontology('test')
      if '**ERROR' not in answer:
        icon = qta.icon('fa.check', scale_factor=1.2)
        button = QPushButton(icon, "")
        self.tabLayoutBody.addWidget(button, 5, 1)
        title = QLabel(answer)
        self.tabLayoutBody.addWidget(title, 5, 2)
      else:
        button = QPushButton('Install')
        button.clicked.connect(lambda: ontology('install'))
        self.tabLayoutBody.addWidget(button, 5, 1)
        button = QPushButton('Help')
        button.clicked.connect(lambda: self.help('ontology'))
        self.tabLayoutBody.addWidget(button, 5, 3)
    else:
      ontology('install')
      icon = qta.icon('fa.question', scale_factor=1.2)
      button = QPushButton(icon, "")  #icon with no text
      button.clicked.connect(lambda: self.ontology('test'))
      self.tabLayoutBody.addWidget(button, 5, 1)
    return

  @classmethod
  def help(cls, topic):
    """
    Open browser with help information

    Args:
      topic (str): topic that should be helped
    """
    baseURL = 'https://pasta-eln.github.io/troubleshooting.html#'
    system = getOS().replace(' ','_')
    webbrowser.open(baseURL+system+'_'+topic)
    return
